// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/manabie-com/togo/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IDatabase is an autogenerated mock type for the IDatabase type
type IDatabase struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: _a0, _a1
func (_m *IDatabase) AddTask(_a0 *models.Task, _a1 func(string, string) error) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Task, func(string, string) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: userID, password, maxTodo
func (_m *IDatabase) AddUser(userID string, password string, maxTodo int32) error {
	ret := _m.Called(userID, password, maxTodo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int32) error); ok {
		r0 = rf(userID, password, maxTodo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountTasks provides a mock function with given fields: _a0, _a1
func (_m *IDatabase) CountTasks(_a0 string, _a1 string) (int32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, string) int32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxTodo provides a mock function with given fields: userID
func (_m *IDatabase) GetMaxTodo(userID string) (int32, error) {
	ret := _m.Called(userID)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTasks provides a mock function with given fields: _a0, _a1
func (_m *IDatabase) RetrieveTasks(_a0 string, _a1 string) ([]*models.Task, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func(string, string) []*models.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUser provides a mock function with given fields: _a0, _a1
func (_m *IDatabase) ValidateUser(_a0 string, _a1 string) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
