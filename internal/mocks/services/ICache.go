// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ICache is an autogenerated mock type for the ICache type
type ICache struct {
	mock.Mock
}

// GetMaxTodo provides a mock function with given fields: userId
func (_m *ICache) GetMaxTodo(userId string) (int32, error) {
	ret := _m.Called(userId)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string) int32); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfTasks provides a mock function with given fields: userId, createdDate
func (_m *ICache) GetNumberOfTasks(userId string, createdDate string) (int32, error) {
	ret := _m.Called(userId, createdDate)

	var r0 int32
	if rf, ok := ret.Get(0).(func(string, string) int32); ok {
		r0 = rf(userId, createdDate)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, createdDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncTask provides a mock function with given fields: userId, createdDate
func (_m *ICache) IncTask(userId string, createdDate string) error {
	ret := _m.Called(userId, createdDate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, createdDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxTodo provides a mock function with given fields: userId, maxTodo
func (_m *ICache) SetMaxTodo(userId string, maxTodo int32) error {
	ret := _m.Called(userId, maxTodo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int32) error); ok {
		r0 = rf(userId, maxTodo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNumberOfTasks provides a mock function with given fields: userId, createdDate, count
func (_m *ICache) SetNumberOfTasks(userId string, createdDate string, count int32) error {
	ret := _m.Called(userId, createdDate, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int32) error); ok {
		r0 = rf(userId, createdDate, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
